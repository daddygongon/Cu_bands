#+begin_src ruby

BAND_STR = [ # L -> G -> X -> K -> G
            [0, '{/Symbol G}', 0.5],    # G[0,0,0]
            [40,'X', 0.25],              # X[1/2,0,0]
            [80,'W', Math.sqrt(2.0)/4.0],# W[1/2,1/4,0]
            [120, 'L', Math.sqrt(3.0)/4.0], # L[1/4,1/4,1/4]
            [160, '{/Symbol G}', Math.sqrt(18.0)/8.0], # G[0,0,0]
            [200, 'K', Math.sqrt(2.0)/8.0],# K[3/8,3/8,0]
            [240, 'X', 1.0], # X[4/8,4/8,0]
  ]

def adjust_x(data)
  adjusted = []
  x = -0.5
  #BAND_STR
  data.each_with_index do |data, i|
    n = i/40
    step = BAND_STR[n][2]
    x += step
    adjusted << x
  end
  return adjusted
end
def mk_xtics
  string = ''
  x_v = 0.0
  BAND_STR.each_with_index do |params, i|
    p step = params[2]
    if i == 0
      string << "\"#{params[1]}\" 0.0, "
    elsif i < 6 
      string << "\"#{params[1]}\" #{x_v-step}, "
    else
      string << "\"#{params[1]}\" #{x_v-0.5}"
    end
    x_v += 40*step
  end
  return string
end
def mk_plot_data(x, y, rgbs, plot_data, e_f=0.0)
  (x.size-1).times do |i|
    xx = [x[i],x[i+1]]
    yy = [y[i]-e_f,y[i+1]-e_f]
    rgb = rgbs[i]
    plot_data << [xx, yy, w: :l, lw: 2, lc_rgb: rgb, notitle: '']
  end
end
def set_rgbs(spds, sp=true)
  rgbs = []
  spds.each do |ele|
    s = ele.to_h['Cu']['s']
    p = ele.to_h['Cu']['p']
    d = ele.to_h['Cu']['d']
    total = s**2+p**2+d**2
    if total.to_f >= 0.00000001
      if sp
        r = sprintf("%02x",((s**2+p**2)/total)*255.to_i)
        g = sprintf("%02x",0.to_i)
      else
        r = sprintf("%02x",(s**2/total)*255.to_i)
        g = sprintf("%02x",(p**2/total)*255.to_i)
      end
      b = sprintf("%02x",(d**2/total)*255.to_i)
      rgb = '#'+r+g+b
      rgbs << rgb
    else
      rgbs << '#000000'
    end
  end
  return rgbs
end

require 'pycall/import'
include PyCall::Import

pyimport :sys
pyimport 'numpy', as: :np
pyfrom 'pymatgen.io.vasp.outputs', import: :Vasprun

class Dos
  attr_reader :e_f, :energy, :t, :s, :p, :d, :sp
  def initialize(dir = "../dos_calc_fine")
    @dir = dir
    get_dos
  end

  def get_dos
    dosrun = Vasprun.(File.join(@dir,"vasprun.xml"))
    @e_f = dosrun.efermi
    e_object = (dosrun.tdos.energies - @e_f)
    @energy = PyCall::List.(e_object).to_a
    @t = PyCall::List.(dosrun.tdos.densities.to_a[0][1]).to_a

    spd_dos = dosrun.complete_dos.get_spd_dos()
    @s = get_spd_list(spd_dos, 0)
    @p = get_spd_list(spd_dos, 1)
    @d = get_spd_list(spd_dos, 2)
    @sp = []
    @energy.size.times { |i| @sp << @s[i]+@p[i] }
  end

  def get_spd_list(spd_dos, i)
    spd_d = spd_dos.to_a[i][1].densities
    PyCall::List.(spd_d.to_a[0][1]).to_a
  end
end

class MkGnuplotData
  attr_reader :lists
  def mk_dos_plot_data(xys)
    yy = xys[0]
    @lists = []
    xys[1..-1].each do |xx|
      vals = xx[0]
      title = xx[1]
      lw = xx[2] || 2
      rgb = xx[3] || '#000000'
      @lists << [vals, yy, w: :l, lw: lw, lc_rgb: rgb, title: title]
    end
  end
end

dos = Dos.new
$e_f = dos.e_f

xys = [dos.energy,
       [dos.t, 'total', 1, '#000000'],
       #       [dos.s, 's', 2, '#ff0000'],
       #       [dos.p, 'p', 2, '#00ff00'],
       [dos.sp, 's+p', 2, '#ff0000'],
       [dos.d, 'd', 2, '#0000ff']]
gnuplot = MkGnuplotData.new
gnuplot.mk_dos_plot_data(xys)
dos_plot_data = gnuplot.lists

# band
def get_bands(dir = "../band_calc_test")
  run = Vasprun.(File.join(dir,"vasprun.xml"),
                 parse_projected_eigen: true)
  bands = run.get_band_structure(File.join(dir,"KPOINTS"),
                                 line_mode: true,
                                 efermi: $e_f)
  e_bands = PyCall::List.(bands.bands.to_a[0][1]).to_a
  p arg1 = PyCall::Dict.({'Cu': PyCall::Tuple.(["s", "p", "d"])})
  p_bands = bands.get_projections_on_elements_and_orbitals(arg1)
  return [e_bands, p_bands]
end


p x_tics_str = "(#{mk_xtics})"
ax = adjust_x((0..240-1).to_a)
range = ax[-1]

e_bands, p_bands = get_bands()
band_plot_data = []
e_bands.each_with_index do |e_band, i|
  spds = PyCall::Dict.(p_bands).to_a[0][1][i].to_a
  rgbs = set_rgbs(spds, false)
  yy = PyCall::List.(e_band).to_a
  mk_plot_data(ax, yy, rgbs, band_plot_data, $e_f)
end

# multiplot in gnuplot
require 'numo/gnuplot'
Numo.gnuplot do
  set grid: 'ytics lt 2'
  set termoption: 'enhanced'
  set lmargin: 0
  set rmargin: 0
  set tmargin: 0
  set bmargin: 0
  set yrange: '[-10:10]'
  set multiplot: 'title "Band diagram of Cu" font ",18"'
# dos gnuplot
  set size: '0.3, 0.8'
  set origin: '0.6, 0.1'
  set xrange: '[0:7]'
  set xlabel: '"Density of states" font ",18"'
  unset ytics: ''
  unset xtics: ''
  plot *dos_plot_data
# band gnuplot
  set grid: 'xtics lt 1'
  set size: '0.5, 0.8'
  set origin: '0.1, 0.1'
  set xrange: "[0:#{range}]"
  set ytics: '"2.5" font ",18"'
  set xtics: x_tics_str
  set ylabel: '"{/Times-Italic E-E}_f [eV]" font ",18"'
  set xlabel: '"k-points" font ",18"'
  plot *band_plot_data
  unset multiplot: ''
end

#+end_src

